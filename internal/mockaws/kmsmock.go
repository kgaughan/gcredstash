// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kgaughan/gcredstash/internal (interfaces: Kms)
//
// Generated by this command:
//
//	mockgen -package mockaws -destination internal/mockaws/kmsmock.go github.com/kgaughan/gcredstash/internal Kms
//

// Package mockaws is a generated GoMock package.
package mockaws

import (
	context "context"
	reflect "reflect"

	kms "github.com/aws/aws-sdk-go-v2/service/kms"
	gomock "go.uber.org/mock/gomock"
)

// MockKms is a mock of Kms interface.
type MockKms struct {
	ctrl     *gomock.Controller
	recorder *MockKmsMockRecorder
	isgomock struct{}
}

// MockKmsMockRecorder is the mock recorder for MockKms.
type MockKmsMockRecorder struct {
	mock *MockKms
}

// NewMockKms creates a new mock instance.
func NewMockKms(ctrl *gomock.Controller) *MockKms {
	mock := &MockKms{ctrl: ctrl}
	mock.recorder = &MockKmsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKms) EXPECT() *MockKmsMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockKms) Decrypt(ctx context.Context, params *kms.DecryptInput, optFns ...func(*kms.Options)) (*kms.DecryptOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Decrypt", varargs...)
	ret0, _ := ret[0].(*kms.DecryptOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockKmsMockRecorder) Decrypt(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockKms)(nil).Decrypt), varargs...)
}

// GenerateDataKey mocks base method.
func (m *MockKms) GenerateDataKey(ctx context.Context, params *kms.GenerateDataKeyInput, optFns ...func(*kms.Options)) (*kms.GenerateDataKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateDataKey", varargs...)
	ret0, _ := ret[0].(*kms.GenerateDataKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateDataKey indicates an expected call of GenerateDataKey.
func (mr *MockKmsMockRecorder) GenerateDataKey(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDataKey", reflect.TypeOf((*MockKms)(nil).GenerateDataKey), varargs...)
}
